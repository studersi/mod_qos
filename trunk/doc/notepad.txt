
- collecting additional client/connection attributes such as
  - requests per single TCP connection (keep-alive)
  + 304 responses
  + respone content types (html/css/js/image/...)
  - elapse time between requests
  - request/response length (body)
  - request/response headers (types, length)
  - other
- more "dynamic" rules:
  - enforce rules on certain conditions only (e.g. overall server usage)
  - adjust metrics dynamically
  - learning and permissive mode (server wide, per function)
- dynamic rule adjustment of the generic request filter
- improved anomalie detection (thresholds, logging)
  - set client event to be used in other rules
- re-design/re-implementation of some parts/functions
  + maybe dropping some features
    + remove QS_SrvPreferNet
  - maybe start the implementation of a separate module.
    + see mod_setenvifplus
    - mod_qos "light"
- web interface to configure mod_qos dynamically
  - impoved viewer
+ QS_ClientEventRequestLimit limits the number of concurrent
  events per client source IP.
- propagate client information via request header (set additional variables)
+ improved variable handling and propagation via header
+ deflate body
  + adjust content-length header (requires parp 0.8 or higher)
+ new implementation of the QS_SrvMaxConnPerIP functionality (no tree anymore)
x initial socket timeout for new connections (tcp open only and no initial request)
- configure file path for mutex/sem files
  + debug/error message showing if and which file is used

legend:
- to be documented/not yet decided to implement
* documented but not implememted
+ implemented
. definition/open issue/option
x we are not going implement this

----------------

scp index.html pbuchbinder,mod-qos@web.sourceforge.net:htdocs
