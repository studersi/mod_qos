#
# $Id$
#
#   BrowserMatch               "event"                         qsevent=yes
#   QS_SetEnvIf                qsevent !QS_VipRequest          qsmin=event
#   QS_EventPerSecLimit        qsmin  5

INCLUDE scripts/ports

CLIENT 10

_LOOP 1
_LOOP 40
_REQ localhost $QS_PORT_BASE
__GET /test/index.html HTTP/1.1
__Host: localhost
__Connection: keep-alive
__User-Agent: event
__
_EXPECT . "test index.html"
_WAIT
# 10 clients, 500ms ~ 20 req/sec
_SLEEP 500
_END LOOP
_CLOSE
_END LOOP

_REQ localhost $QS_PORT_BASE
__GET /qos HTTP/1.1
__Host: localhost
__Connection: keep-alive
__
_EXPECT . "<!--4-->.*var.*qsmin.*>[0-9]{2,3}&nbsp;ms"
_WAIT
_CLOSE

#
# takes about 24 seconds until here
#

END

CLIENT

_SLEEP 15000

_REQ localhost $QS_PORT_BASE
__GET /qos?auto HTTP/1.1
__Host: localhost
__Connection: keep-alive
__
_MATCH body "5000;QS_EventPerSecLimit;5\[var=\[qsmin\]\]: (.*)" VALUE
_WAIT
_CLOSE

_IF "$VALUE" MATCH "^0$"
_EXIT FAILED
_END IF

_EXPECT EXEC "mod_qos\(050\): request rate limit, rule: var=\[qsmin\]\(5\), req/sec=[0-9]+, delay=[0-9]{2,3}ms"
_EXEC tail -1 logs/error_log

_SLEEP 15000

_LOOP 10
# trigger the measurement
_REQ localhost $QS_PORT_BASE
__GET /test/index.html HTTP/1.1
__Host: localhost
__Connection: keep-alive
__User-Agent: event
__
_EXPECT . "test index.html"
_WAIT
_CLOSE
# 1 client, 5000ms ~ 0.2 req/sec
_SLEEP 5000
_END LOOP

_REQ localhost $QS_PORT_BASE
__GET /qos?auto HTTP/1.1
__Host: localhost
__Connection: keep-alive
__User-Agent: event
__
_MATCH body "5000;QS_EventPerSecLimit;5\[var=\[qsmin\]\]: (.*)" VALUE
_WAIT
_IF "$VALUE" NOT MATCH "^0$"
_EXIT FAILED
_END IF

END
