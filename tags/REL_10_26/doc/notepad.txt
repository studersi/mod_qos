
+ study pcre and set match_limit
- re-implement (again) the per connection/ip list (supporting thousands of
  connections per server)
- limit number of parameters (better to be implemented in mod_parp)
- improved anomaly detection, collecting additional client/connection
  attributes such as
  - requests per single TCP connection (keep-alive)
  + 304 responses
  + respone content types (html/css/js/image/...)
    - store/configure "normal" behavoir (stop learning after a while)
  - elapse time between requests
  - request/response length (body)
  - request/response headers (types, length)
  - request/response duration
  - other
  - log event
  + multiple "per client" event counter
    + combine these counters (if c1>n AND c2>m then c3++)
+ geo location
  + country
  - region, city. latitude/longitude
+ doc: document VIP behavior (exact: which directive are affected)
- more "dynamic" rules:
  - enforce rules on certain conditions only (e.g. overall server usage)
    + QS_SrvMinDataRate <bytes per second> [<max bytes per second> [ <free>% ] ]
    + QS_SrvMaxConnPerIP <number> [<onnections>]
  - adjust metrics dynamically
  - learning and permissive mode
    + server wide (global)
    - per function
  + store metrics as environment variables (used by QS_EventRequestLimit,
    QS_CondLocRequestLimitMatch and others)
    + QS_SrvConn 
    + QS_ClientEventLimitCount value
    - more variables
- dynamic rule adjustment for the generic request filter
  - "in module" learing (instead of qsfilter2)
  - or use separate application (java?) to generate rules (ICAP?)
  - automatic rule adjustment
    - privileged users/ip/??? to learn from automatically
  - crawler
  + reset of QS_ClientEventLimitCount counters
- request filter:
  + json in request query (not body)
  - gwt parser (req id to build parameter names?)
  - qsfilter2 improvements
    - avoid certain pattern
    - different output formats
    - built-in (preferred) pattern ("expert mode")
- response filter (e.g. detecting "bad" js code)
  - try to enforce content security header settings
- more user friendly error handling for QS_ClientEventBlockCount directive
  - show the error page for more than only the first occurence
    - e.g. answer the next 5 (or more) requests with an error page too
      (instead of closing the TCP connection)
    - detect, if counter was incremented at http response, e.g. session cookie
       => show error page at next request
  + add a second QS_Block counter?
- re-design/re-implementation of some parts/functions
  + maybe dropping some features
    + remove QS_SrvPreferNet
    - other
  - maybe start the implementation of a separate module.
    + see mod_setenvifplus
    - mod_qos "light"
    - sepatate modules for some function sets
- web interface (handler) to configure mod_qos dynamically
  - impoved viewer
  - console:
    + clear per client stats
    + block clients/IPs
    + mark clients as vip
- management tool (sep. application)
  - configuration guidance
  - log data management
  - rule generation
  - utilities (ha/lb/...)
  + log data signing (using pipe: "|sig |qsrotate <file>")
  - nms plugin (OpenNMS? Nagios?)
- support IPv6
  + workaround (checksum only)
  - "real" IPv6 support
- propagate client information via request header (set additional variables)
  + using mod_setenvifplus
- decoding functions (UTF-8, non-standard MS/IIS %uXXYY, HTML, ANSI C, charset, other)
  - enhance qos_unescaping() (partial done)
  - document path_decode_hook()/query_decode_hook()
+ new implementation of the QS_SrvMaxConnPerIP functionality (linear, no tree anymore)
  - improved search alg.
x initial socket timeout for new connections (tcp open only and no initial request)
+ QS_SrvMaxConnClose to support "percentage" of the MaxClient settings instead of abs. value
  - set variable mod_qos_con_ip (see mod_qos_con)
+ user tracking cookie (for statistics)
  + timeout/renew
+ gnu autotools to build tools
+ create request id if mod_uniqueid is not available
+ enforce cookie support (redirect until client sends cookie), option for
  user tracking cookie or seperate cookie?
  + disable for certain user-agent headers (or X-Do-Not-Track header)
+ OpenSSL 1.0 support for qsfilter2 (safestack).
- make mod_qos more portable
  - use apr types and functions
  - e.g. use apr_time_t instead of time_t
+ qsrotate: daylight saving time support
x headerfilter: no duplicate req headers -> merged by Apache
+ fix regsub (2.2.22)

----------------
legend:
- to be documented/not yet decided to implement
* documented but not implememted
+ implemented
. definition/open issue/option
x we are not going implement this

----------------
scp index.html pbuchbinder,mod-qos@web.sourceforge.net:htdocs
----------------
May 2007, Version 1: Limits concurrent requests on a per URL path basis.
July 2007, Version 2.2: Introduction of support utilities.
August 2007, Version 3: Cnnection level controls and a status viewer.
September 2007, Version 4: Rquest/response throttling and generic request filtering.
December 2007, Version 5: User defined event limitation features.
March 2008, Version 6: Per client (IP) control mechanisms.
May 2008, Version 7: Enforces minimum upload/download throughput a client must generate.
September 2009, Version 9: Anomaly detection using client characteristic measurement.
Februar 2012, Version 10: Adds geolocation features (ISO 3166 country codes).

----------------
