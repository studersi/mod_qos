#
# QS_ClientEventBlockCount 20 30
# QS_SetEnvIfStatus  400 QS_Block
# RequestReadTimeout header=20-40,MinRate=500 body=20,MinRate=500
#
# Aborting the connection causes a segfault when using
# Apache 2.4.29 MPM Event and mod_reqtimeout because
# core.c does not set the socket on conn_config and
# event.c does not stop the "request" processing even
# the connection has been aborted.
#
# 0  apr_socket_timeout_get (sock=0x0, t=0x7f1432ff49b0) at network_io/unix/sockopt.c:357
# 1  0x00000000005051de in reqtimeout_filter (f=0x7f14380397f0, bb=0x7f142800e140, mode=AP_MODE_GETLINE, block=APR_BLOCK_READ, readbytes=0)
#    at mod_reqtimeout.c:225
#
# Test is used to ensure we don't trap into the same
# bug in future Apache versions for MPM Worker.

INCLUDE scripts/ports

EXEC ./ctl.sh restart -D Event2429 -D real_ip >/dev/null
SLEEP 1000

CLIENT

_LOOP 20
_REQ localhost $QS_PORT_BASE
__GET 
__Host: localhost
__Connection: keep-alive
__Req: 01
__
_EXPECT . "400 Bad Request"
_WAIT
_CLOSE
_END LOOP

_EXPECT ERROR "Connection reset by peer"
_REQ localhost $QS_PORT_BASE
__GET / HTTP/1.0
_CLOSE

_SLEEP 200

_EXPECT EXEC "mod_qos\(060\): access denied, QS_ClientEventBlockCount rule: max=20, current=20"
_EXEC tail -2 logs/error_log

_SLEEP 2000

_EXPECT EXEC "!exit signal"
_EXEC tail -10 logs/error_log

END


BLOCK FINALLY
_EXEC ./ctl.sh stop 2>/dev/null 1>/dev/null
_SLEEP 1000
_EXEC ./ctl.sh start 2>/dev/null 1>/dev/null
END

